
Started writing this tests on 20.02.2021
This code is testing out some stuff not testable in a running system. It prepares for the main development
cycles of mcpython 7. It may be very broken at any point. It will likely never be production ready.
The process is split into "iterations" each implementing some features and merging features from previous iterations


+-----------------------------+
| [dev]: Begin of Iteration 1 |
+-----------------------------+
[uuk]: implemented multiprocessing system
[uuk]: implemented build system
[uuk]: implemented basic codec API
[uuk]: implemented basic block API, with its own CODEC instance
[uuk]: implemented window class spawned in rendering thread
[uuk]: fixed some process manager stuff
[uuk]: process manager accepts now code to eval() as func parameter for execute_on()
[uuk]: added resource loader
[uuk]: mc assets are now auto-downloaded and linked at runtime
[uuk]: added some more io stuff
[uuk]: TextureBaker is now capable of doing some cool, but still WIP
[uuk]: added some dummy codec files
[uuk]: added ReloadHandler API
[uuk]: implemented collision system
[uuk]: some work on the data generation system
[uuk]: data gen system is now better working
[uuk]: started writing some plugin system for data-driven extension
[uuk]: some more API work
[uuk]: removed nuitka build output until a final solution is found
[uuk]: written some docs and linked some stuff
[uuk]: some writeup on the rendering part of the block system
[uuk]: started implementing rendering stuff for batch rendering [WIP]
[uuk]: added safe variant for printing across processes
[uuk]: cleaned up some stuff around process management
+---------------------------+
| [dev]: End of Iteration 1 |
+---------------------------+

+-----------------------------+
| [dev]: Begin of Iteration 2 |
+-----------------------------+
[uuk]: using now another implementation for async process management called asyncm
[uuk]: bumped some dependency versions
[uuk]: using now pyglet 2.0dev5 for rendering
[uuk]: written some bindings to execute interaction events on other processes
[uuk]: window interaction events are now routed onto the correct process and can be bound to know
[uuk]: added new texture atlas implementation
[uuk]: added a new resource loader implementation
[uuk]: added async variant for adding textures to a texture atlas
[uuk]: added a bit of networking code, abstracting the socket away from the programmer


WARNING:
pyglet 2.0 currently has some problems with the way we spawn windows. You may need to modify the pyglet code
in order to make it work

Plans for now:
- make pyglet do some stuff
- add some world system, with basic block class
- add renderer for block models (basic TextureAtlas needed!)
