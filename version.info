
Started writing this test on 20.02.2021
This code is testing out some stuff not testable in a running system. It prepares for the main development
cycles of mcpython 7. It may be very broken at any point. It will likely never be production ready.

The following systems are planned on testing:
- efficient rendering, including blocks & entities, post vertex modification, etc.
- CODEC system for dynamically extending data decoders
- networking with client/server separation
- advanced storage functionality with global/local registries
- part-wise data driven modding system
- shaders with pyglet 2
- compilation to .exe and similar
- multiprocessing
- runtime method code modification via code
- mod reload during runtime


[uuk]: implemented multiprocessing system
[uuk]: implemented build system
[uuk]: implemented basic codec API
[uuk]: implemented basic block API, with its own CODEC instance
[uuk]: implemented window class spawned in rendering thread
[uuk]: fixed some process manager stuff
[uuk]: process manager accepts now code to eval() as func parameter for execute_on()
[uuk]: added resource loader
[uuk]: mc assets are now auto-downloaded and linked at runtime
[uuk]: added some more io stuff
[uuk]: TextureBaker is now capable of doing some cool, but still WIP
[uuk]: added some dummy codec files
[uuk]: added ReloadHandler API
[uuk]: implemented collision system
[uuk]: some work on the data generation system
[uuk]: data gen system is now better working
[uuk]: started writing some plugin system for data-driven extension
[uuk]: some more API work
[uuk]: removed nuitka build output until a final solution is found
[uuk]: written some docs and linked some stuff
[uuk]: some writeup on the rendering part of the block system
[uuk]: started implementing rendering stuff for batch rendering [WIP]
[uuk]: added safe variant for printing across processes
[uuk]: cleaned up some stuff around process management

near-future plan:
- implement default block renderer and test on first blocks
- Codec for block models & states
- implement CODEC handler system, for loading stuff, including for block registry
- implement debug world generator for testing blocks out
- block collisions, ray tracing of blocks from player
